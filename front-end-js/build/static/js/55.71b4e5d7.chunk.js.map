{"version":3,"sources":["pages/authentication/ForgetPassword.jsx"],"names":["ForgetPassword","useState","error","setError","loading","setLoading","validationSchema","Yup","shape","email","max","required","useFormik","initialValues","submit","onSubmit","values","setTimeout","toast","success","errors","touched","handleBlur","handleChange","handleSubmit","height","alignItems","flexDirection","justifyContent","sx","padding","maxWidth","marginTop","boxShadow","mb","width","src","alt","fontSize","fontWeight","flexWrap","my","noValidate","style","fullWidth","name","type","label","onBlur","onChange","value","Boolean","helperText","mt","textAlign","variant","margin","color","to"],"mappings":"0PAkGeA,UAvFQ,WACrB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAMMC,EAAmBC,MAAaC,MAAM,CAC1CC,MAAOF,MAAaE,MAAM,yBAAyBC,IAAI,KAAKC,SAAS,uBAEvE,EAOIC,YAAU,CACZC,cAhBoB,CACpBJ,MAAO,mBACPK,OAAQ,MAeRR,mBACAS,SAAU,SAAAC,GACRX,GAAW,GACXY,YAAW,WACTZ,GAAW,GACXa,IAAMC,QAAQ,+BACb,KAECjB,IACFC,EAAS,UACTE,GAAW,OAlBfe,EADF,EACEA,OACAJ,EAFF,EAEEA,OACAK,EAHF,EAGEA,QACAC,EAJF,EAIEA,WACAC,EALF,EAKEA,aACAC,EANF,EAMEA,aAiBF,OAAO,cAAC,IAAD,CAASC,OAAO,QAAQC,WAAW,SAASC,cAAc,SAASC,eAAe,SAAlF,SACH,eAAC,IAAD,CAAMC,GAAI,CACVC,QAAS,EACTC,SAAU,IACVC,UAAW,EACXC,UAAW,GAJX,UAME,eAAC,IAAD,CAASP,WAAW,SAASC,cAAc,SAASC,eAAe,SAASM,GAAI,EAAhF,UACE,cAAC,IAAD,CAAKC,MAAO,GAAID,GAAI,EAApB,SACE,qBAAKE,IAAI,wBAAwBD,MAAM,OAAOE,IAAI,eAEpD,cAAC,IAAD,CAAIC,SAAU,GAAIC,WAAY,IAA9B,oCAKF,eAAC,IAAD,CAASX,eAAe,gBAAgBY,SAAS,OAAOC,GAAI,EAA5D,UACE,uBAAMC,YAAU,EAAC3B,SAAUS,EAAcmB,MAAO,CAChDR,MAAO,QADP,UAGE,cAAC,IAAD,CAAgBS,WAAS,EAACC,KAAK,QAAQC,KAAK,QAAQC,MAAM,QAAQC,OAAQ1B,EAAY2B,SAAU1B,EAAc2B,MAAOlC,EAAOP,OAAS,GAAIP,MAAOiD,QAAQ9B,EAAQZ,OAASW,EAAOX,OAAQ2C,WAAY/B,EAAQZ,OAASW,EAAOX,QAE3NP,GAAS,cAAC,IAAD,CAAgBA,OAAK,EAAC2B,GAAI,CACpCwB,GAAI,EACJf,SAAU,GACVC,WAAY,IACZe,UAAW,UAJD,SAMLpD,IAGL,cAAC,IAAD,CAAK2B,GAAI,CACTwB,GAAI,GADJ,SAGGjD,EAAU,cAAC,IAAD,CAAeA,SAAO,EAACwC,WAAS,EAACW,QAAQ,YAAzC,mBAEU,cAAC,IAAD,CAAQX,WAAS,EAACE,KAAK,SAASS,QAAQ,YAAxC,wBAMzB,eAAC,IAAD,CAAOC,OAAO,OAAOH,GAAI,EAAGI,MAAM,gBAAlC,mCACyB,IACvB,cAAC,IAAD,CAAMC,GAAG,YAAT,SACE,cAAC,IAAD,CAAOD,MAAM,eAAb","file":"static/js/55.71b4e5d7.chunk.js","sourcesContent":["import { LoadingButton } from \"@mui/lab\";\nimport { Box, Button, Card, FormHelperText } from \"@mui/material\";\nimport FlexBox from \"components/FlexBox\";\nimport LightTextField from \"components/LightTextField\";\nimport { H1, Small } from \"components/Typography\";\nimport { useFormik } from \"formik\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link } from \"react-router-dom\";\nimport * as Yup from \"yup\";\n\nconst ForgetPassword = () => {\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const initialValues = {\n    email: \"demo@example.com\",\n    submit: null\n  }; // form field value validation schema\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Must be a valid email\").max(255).required(\"Email is required\")\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleBlur,\n    handleChange,\n    handleSubmit\n  } = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: values => {\n      setLoading(true);\n      setTimeout(() => {\n        setLoading(false);\n        toast.success(\"Reset link has been sent!\");\n      }, 1000);\n\n      if (error) {\n        setError(\"Error!\");\n        setLoading(false);\n      }\n    }\n  });\n  return <FlexBox height=\"100vh\" alignItems=\"center\" flexDirection=\"column\" justifyContent=\"center\">\n      <Card sx={{\n      padding: 4,\n      maxWidth: 600,\n      marginTop: 4,\n      boxShadow: 1\n    }}>\n        <FlexBox alignItems=\"center\" flexDirection=\"column\" justifyContent=\"center\" mb={5}>\n          <Box width={38} mb={1}>\n            <img src=\"/static/logo/logo.svg\" width=\"100%\" alt=\"Uko Logo\" />\n          </Box>\n          <H1 fontSize={24} fontWeight={700}>\n            Reset your password\n          </H1>\n        </FlexBox>\n\n        <FlexBox justifyContent=\"space-between\" flexWrap=\"wrap\" my={2}>\n          <form noValidate onSubmit={handleSubmit} style={{\n          width: \"100%\"\n        }}>\n            <LightTextField fullWidth name=\"email\" type=\"email\" label=\"Email\" onBlur={handleBlur} onChange={handleChange} value={values.email || \"\"} error={Boolean(touched.email && errors.email)} helperText={touched.email && errors.email} />\n\n            {error && <FormHelperText error sx={{\n            mt: 2,\n            fontSize: 13,\n            fontWeight: 500,\n            textAlign: \"center\"\n          }}>\n                {error}\n              </FormHelperText>}\n\n            <Box sx={{\n            mt: 4\n          }}>\n              {loading ? <LoadingButton loading fullWidth variant=\"contained\">\n                  Reset\n                </LoadingButton> : <Button fullWidth type=\"submit\" variant=\"contained\">\n                  Reset\n                </Button>}\n            </Box>\n          </form>\n\n          <Small margin=\"auto\" mt={3} color=\"text.disabled\">\n            Don't have an account?{\" \"}\n            <Link to=\"/register\">\n              <Small color=\"primary.main\">Create an account</Small>\n            </Link>\n          </Small>\n        </FlexBox>\n      </Card>\n    </FlexBox>;\n};\n\nexport default ForgetPassword;"],"sourceRoot":""}