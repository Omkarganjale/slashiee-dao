{"version":3,"sources":["pages/invoice/AddInvoice.jsx","hooks/useTitle.jsx"],"names":["StyledFormControl","styled","FormControlLabel","fontWeight","StyledFlexBox","FlexBox","theme","marginBottom","breakpoints","down","width","marginRight","AddInvoice","useTitle","t","useTranslation","navigate","useNavigate","handleCancel","initialValues","orderNo","uniqueId","orderDate","Date","billTo","billToAddress","billToPhone","billFrom","billFromAddress","billFromPhone","status","items","id","itemName","itemPrice","itemQuantity","validationSchema","Yup","shape","required","positive","default","of","pt","pb","sx","padding","onSubmit","values","console","log","children","errors","touched","setFieldValue","handleChange","handleSubmit","justifyContent","alignItems","flexWrap","row","name","defaultValue","onChange","map","item","value","label","control","className","fullWidth","variant","onClick","fontSize","color","borderColor","type","container","spacing","md","sm","xs","display","mb","disabled","newValue","renderInput","params","my","error","Boolean","helperText","render","arrayHelper","size","push","now","index","msg","mx","remove","backgroundColor","palette","primary","red","maxWidth","text","useContext","TitleContext","title","setTitle","useEffect"],"mappings":"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","file":"static/js/58.3a7a67c8.chunk.js","sourcesContent":["import { DatePicker } from \"@mui/lab\";\nimport { Box, Button, Card, Divider, FormControlLabel, Grid, Radio, RadioGroup, styled } from \"@mui/material\";\nimport FlexBox from \"components/FlexBox\";\nimport LightTextField from \"components/LightTextField\";\nimport { H3, H4, H6, Small, Span } from \"components/Typography\";\nimport { ErrorMessage, FieldArray, Formik } from \"formik\";\nimport useTitle from \"hooks/useTitle\";\nimport { Fragment } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport uniqueId from \"utils/generateId\";\nimport * as Yup from \"yup\"; // styled components\n\nconst StyledFormControl = styled(FormControlLabel)(() => ({\n  \"& .MuiTypography-root\": {\n    fontWeight: 600\n  }\n}));\nconst StyledFlexBox = styled(FlexBox)(({\n  theme\n}) => ({\n  marginBottom: 30,\n  [theme.breakpoints.down(750)]: {\n    \"& .MuiFormGroup-root\": {\n      marginBottom: 10\n    }\n  },\n  [theme.breakpoints.down(394)]: {\n    \"& .MuiButton-root, & .buttonWrapper\": {\n      width: \"100%\"\n    },\n    \"& .MuiButton-outlined\": {\n      marginRight: 0,\n      marginBottom: 10\n    }\n  }\n}));\n\nconst AddInvoice = () => {\n  // change navbar title\n  useTitle(\"Add Invoice\");\n  const {\n    t\n  } = useTranslation();\n  const navigate = useNavigate();\n\n  const handleCancel = () => navigate(\"/dashboard/invoice-list\");\n\n  const initialValues = {\n    orderNo: uniqueId(),\n    orderDate: new Date(),\n    billTo: \"\",\n    billToAddress: \"\",\n    billToPhone: \"\",\n    billFrom: \"\",\n    billFromAddress: \"\",\n    billFromPhone: \"\",\n    status: \"Pending\",\n    items: [{\n      id: 1,\n      itemName: \"\",\n      itemPrice: 0,\n      itemQuantity: 0\n    }]\n  };\n  const validationSchema = Yup.object().shape({\n    billTo: Yup.string().required(\"Bill To is Required!\"),\n    billToAddress: Yup.string().required(\"Address is Required!\"),\n    billToPhone: Yup.number().positive().required(\"Phone is Required!\"),\n    billFrom: Yup.string().required(\"Bill From is Required!\"),\n    billFromAddress: Yup.string().required(\"Address is Required!\"),\n    billFromPhone: Yup.number().positive().required(\"Phone is Required!\"),\n    status: Yup.string().default(() => \"Pending\"),\n    items: Yup.array().of(Yup.object().shape({\n      itemName: Yup.string().required(\"Item Name Required\"),\n      itemPrice: Yup.number().required(\"Item Name Required\"),\n      itemQuantity: Yup.number().required(\"Item Name Required\")\n    }))\n  });\n  return <Box pt={2} pb={4}>\n      <Card sx={{\n      padding: 4\n    }}>\n        <H3 marginBottom={2}>{t(\"Order Status\")}</H3>\n\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={values => {\n        console.log(values);\n      }} children={({\n        values,\n        errors,\n        touched,\n        setFieldValue,\n        handleChange,\n        handleSubmit\n      }) => {\n        return <form onSubmit={handleSubmit}>\n                <StyledFlexBox justifyContent=\"space-between\" alignItems=\"center\" flexWrap=\"wrap\">\n                  <RadioGroup row name=\"status\" defaultValue={values.status} onChange={handleChange}>\n                    {[\"Pending\", \"Processing\", \"Delivered\"].map(item => <StyledFormControl key={item} value={item} label={t(item)} control={<Radio />} />)}\n                  </RadioGroup>\n\n                  <Box className=\"buttonWrapper\">\n                    <Button fullWidth variant=\"outlined\" onClick={handleCancel} sx={{\n                fontSize: 12,\n                width: 124,\n                color: \"text.disabled\",\n                borderColor: \"text.disabled\",\n                marginRight: 2\n              }}>\n                      {t(\"Cancel\")}\n                    </Button>\n                    <Button fullWidth type=\"submit\" variant=\"contained\" sx={{\n                width: 124,\n                fontSize: 12\n              }}>\n                      {t(\"Save\")}\n                    </Button>\n                  </Box>\n                </StyledFlexBox>\n\n                <Grid container spacing={3}>\n                  <Grid item md={4} sm={6} xs={12}>\n                    <Small display=\"block\" mb={1}>\n                      Order Number\n                    </Small>\n                    <LightTextField fullWidth disabled name=\"orderNo\" value={values.orderNo} onChange={handleChange} />\n                  </Grid>\n                  <Grid item md={4} sm={6} xs={12}>\n                    <Small display=\"block\" mb={1}>\n                      Order Date\n                    </Small>\n                    <DatePicker value={values.orderDate} onChange={newValue => setFieldValue(\"orderDate\", newValue)} renderInput={params => <LightTextField {...params} fullWidth />} />\n                  </Grid>\n                </Grid>\n\n                <Divider sx={{\n            my: 4\n          }} />\n\n                <Grid container spacing={3}>\n                  <Grid item md={4} sm={6} xs={12}>\n                    <Box marginBottom={2}>\n                      <Small display=\"block\" mb={1}>\n                        Bill To\n                      </Small>\n                      <LightTextField fullWidth name=\"billTo\" value={values.billTo} onChange={handleChange} error={Boolean(touched.billTo && errors.billTo)} helperText={touched.billTo && errors.billTo} />\n                    </Box>\n\n                    <Box marginBottom={2}>\n                      <Small display=\"block\" mb={1}>\n                        Bill To Address\n                      </Small>\n                      <LightTextField fullWidth name=\"billToAddress\" value={values.billToAddress} onChange={handleChange} error={Boolean(touched.billToAddress && errors.billToAddress)} helperText={touched.billToAddress && errors.billToAddress} />\n                    </Box>\n\n                    <Box>\n                      <Small display=\"block\" mb={1}>\n                        Phone Number\n                      </Small>\n                      <LightTextField fullWidth type=\"number\" name=\"billToPhone\" value={values.billToPhone} onChange={handleChange} error={Boolean(touched.billToPhone && errors.billToPhone)} helperText={touched.billToPhone && errors.billToPhone} />\n                    </Box>\n                  </Grid>\n                  <Grid item md={4} sm={6} xs={12}>\n                    <Box marginBottom={2}>\n                      <Small display=\"block\" mb={1}>\n                        Bill From\n                      </Small>\n                      <LightTextField fullWidth name=\"billFrom\" value={values.billFrom} onChange={handleChange} error={Boolean(touched.billFrom && errors.billFrom)} helperText={touched.billFrom && errors.billFrom} />\n                    </Box>\n\n                    <Box marginBottom={2}>\n                      <Small display=\"block\" mb={1}>\n                        Bill From Address\n                      </Small>\n                      <LightTextField fullWidth name=\"billFromAddress\" value={values.billFromAddress} onChange={handleChange} error={Boolean(touched.billFromAddress && errors.billFromAddress)} helperText={touched.billFromAddress && errors.billTo} />\n                    </Box>\n\n                    <Box>\n                      <Small display=\"block\" mb={1}>\n                        Phone Number\n                      </Small>\n                      <LightTextField fullWidth type=\"number\" name=\"billFromPhone\" value={values.billFromPhone} onChange={handleChange} error={Boolean(touched.billFromPhone && errors.billFromPhone)} helperText={touched.billFromPhone && errors.billFromPhone} />\n                    </Box>\n                  </Grid>\n                </Grid>\n\n                <Divider sx={{\n            my: 4\n          }} />\n\n                <Grid container spacing={2} alignItems=\"flex-end\">\n                  <FieldArray name=\"items\" render={arrayHelper => {\n              return <>\n                          <Grid item xs={12}>\n                            <Button variant=\"contained\" size=\"small\" onClick={() => arrayHelper.push({\n                    id: Date.now(),\n                    itemName: \"\",\n                    itemPrice: 0,\n                    itemQuantity: 0\n                  })} sx={{\n                    marginBottom: 2\n                  }}>\n                              {t(\"Add New Item\")}\n                            </Button>\n                          </Grid>\n\n                          {values.items.map((item, index) => <Fragment key={item.id}>\n                              <Grid item md={4} sm={4} xs={12}>\n                                <Small display=\"block\" mb={1}>\n                                  Item Name\n                                </Small>\n                                <LightTextField fullWidth name={`items.${index}.itemName`} value={item.itemName} onChange={handleChange} />\n                                <ErrorMessage name={`items.${index}.itemName`} render={msg => <Small color=\"secondary.red\" mx={2}>\n                                      {msg}\n                                    </Small>} />\n                              </Grid>\n\n                              <Grid item md={2} sm={3} xs={6}>\n                                <Small display=\"block\" mb={1}>\n                                  Item Price\n                                </Small>\n                                <LightTextField fullWidth type=\"number\" name={`items.${index}.itemPrice`} value={item.itemPrice} onChange={handleChange} />\n                              </Grid>\n\n                              <Grid item md={2} sm={3} xs={6}>\n                                <Small display=\"block\" mb={1}>\n                                  Quantity\n                                </Small>\n                                <LightTextField type=\"number\" fullWidth name={`items.${index}.itemQuantity`} value={item.itemQuantity} onChange={handleChange} />\n                              </Grid>\n\n                              <Grid item md={2} sm={2} xs={12}>\n                                <Button onClick={() => arrayHelper.remove(index)} variant=\"contained\" sx={{\n                      backgroundColor: theme => theme.palette.primary.red,\n                      \"&:hover\": {\n                        backgroundColor: theme => theme.palette.primary.red\n                      }\n                    }}>\n                                  {t(\"Delete\")}\n                                </Button>\n                              </Grid>\n                            </Fragment>)}\n                        </>;\n            }} />\n                </Grid>\n\n                <Divider sx={{\n            my: 4\n          }} />\n\n                <Box maxWidth={320}>\n                  <H4 fontWeight={600}>{t(\"Amount\")}</H4>\n\n                  <FlexBox alignItems=\"center\" justifyContent=\"space-between\" my={1}>\n                    <H6 fontWeight={500}>{t(\"Subtotal\")}</H6>\n                    <H6 fontWeight={500}>$428.00</H6>\n                  </FlexBox>\n\n                  <FlexBox alignItems=\"center\" justifyContent=\"space-between\" my={1}>\n                    <H6 fontWeight={500}>\n                      {t(\"Discount\")}\n                      <Span color=\"text.disabled\"> (BLACKFRIDAY)</Span>\n                    </H6>\n                    <H6 fontWeight={500}>-$8.00</H6>\n                  </FlexBox>\n\n                  <FlexBox alignItems=\"center\" justifyContent=\"space-between\" my={1}>\n                    <H6 fontWeight={500}>VAT</H6>\n                    <H6 fontWeight={500}>$20.00</H6>\n                  </FlexBox>\n\n                  <Divider sx={{\n              my: 2\n            }} />\n\n                  <FlexBox alignItems=\"center\" justifyContent=\"space-between\" my={1}>\n                    <H6>{t(\"Total\")}</H6>\n                    <H6>$20.00</H6>\n                  </FlexBox>\n                </Box>\n              </form>;\n      }} />\n      </Card>\n    </Box>;\n};\n\nexport default AddInvoice;","import { TitleContext } from \"contexts/TitleContext\";\nimport { useContext, useEffect } from \"react\";\n\nconst useTitle = text => {\n  const {\n    title,\n    setTitle\n  } = useContext(TitleContext);\n  useEffect(() => setTitle(text), [text, setTitle]);\n  return title;\n};\n\nexport default useTitle;"],"sourceRoot":""}